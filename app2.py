# -*- coding: utf-8 -*-
"""app2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EyCiwI5PlU-zYVet7_JU3LskDvh7FK4m
"""

# pages/3_Image_Pets_Classification.py

import streamlit as st
import tensorflow as tf
import numpy as np
from PIL import Image

st.title("üêæ Clasificador de Razas (Oxford-IIIT Pet)")

st.markdown(
    """
    Esta p√°gina permite subir la foto de una mascota (perro/gato) y el modelo preentrenado
    (MobileNetV2 + capa superior) predice la raza (37 clases).
    """
)

# 1) Cargar el modelo (se cachea para que no se recargue en cada interacci√≥n)
@st.cache_resource(show_spinner=False)
def cargar_modelo_pets(path="modelo_pets_mobilenetv2.h5"):
    return tf.keras.models.load_model(path)

model = cargar_modelo_pets()

# 2) Definir la lista de nombres de clase (37 razas)
#    Aseg√∫rate de copiar ac√° el mismo orden que ten√≠a ds_info.features["label"].names
class_names = [
    "Abyssinian", "American Bobtail", "Bengal", "Birman", "Bombay", "British Shorthair",
    "Egyptian Mau", "Maine Coon", "Persian", "Ragdoll", "Russian Blue", "Siamese",
    "Sphynx", "American Bulldog", "American Pit Bull Terrier", "Basset Hound",
    "Beagle", "Boxer", "Chihuahua", "English Cocker Spaniel", "English Setter",
    "German Shorthaired Pointer", "Great Pyrenees", "Havanese", "Japanese Chin",
    "Keeshond", "Leonberger", "Miniature Pinscher", "Newfoundland", "Pomeranian",
    "Pug", "Saint Bernard", "Samoyed", "Scotch Terrier", "Shiba Inu", "Siberian Husky",
    "Toy Poodle", "Yorkshire Terrier"
]

# 3) Funci√≥n de preprocesamiento (mismo que en el entrenamiento)
IMG_SIZE = 128  # debe coincidir con el valor que usaste en el entrenamiento
def preprocess_image_pets(img: Image.Image, target_size=(IMG_SIZE, IMG_SIZE)):
    """
    - Convertir a RGB
    - Redimensionar a (IMG_SIZE, IMG_SIZE)
    - Convertir a float32 y normalizar (√∑255.0)
    - Expandir dimensi√≥n de lote ‚Üí (1, IMG_SIZE, IMG_SIZE, 3)
    """
    img = img.convert("RGB")
    img = img.resize(target_size, resample=Image.BICUBIC)
    arr = np.array(img).astype("float32") / 255.0
    arr = np.expand_dims(arr, axis=0)  # shape ‚Üí (1, IMG_SIZE, IMG_SIZE, 3)
    return arr

# 4) Interface: subir imagen
uploaded_file = st.file_uploader(
    "Sube la foto de tu mascota (JPG o PNG, por favor).",
    type=["jpg", "jpeg", "png"]
)

if uploaded_file is not None:
    # 4.1) Mostrar la imagen original
    imagen = Image.open(uploaded_file)
    st.image(imagen, caption="Imagen cargada", use_column_width=True)

    # 4.2) Preprocesar
    x = preprocess_image_pets(imagen, target_size=(IMG_SIZE, IMG_SIZE))

    # 4.3) Predecir
    with st.spinner("Clasificando la raza‚Ä¶"):
        preds = model.predict(x)           # devuelve un array shape (1, 37)
        prob = float(np.max(preds))        # probabilidad m√°s alta
        clase_idx = int(np.argmax(preds))  # √≠ndice de la clase (0..36)
        clase_nombre = class_names[clase_idx]

    # 4.4) Mostrar resultados
    st.markdown("---")
    st.write(f"**Raza predicha:** `{clase_nombre}`")
    st.write(f"**Probabilidad (softmax):** `{prob:.3f}`")

    # 4.5) Mostrar gr√°fico de barras con todas las probabilidades
    st.subheader("Probabilidades por clase")
    probs_dict = {class_names[i]: float(preds[0][i]) for i in range(len(class_names))}
    st.bar_chart(probs_dict)

else:
    st.info("Por favor, sube la imagen de tu mascota para obtener la predicci√≥n.")