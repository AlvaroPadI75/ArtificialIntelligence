# -*- coding: utf-8 -*-
"""app2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EyCiwI5PlU-zYVet7_JU3LskDvh7FK4m
"""

import streamlit as st
import tensorflow as tf
import numpy as np
from PIL import Image

st.set_page_config(
    page_title="üêï Dog Breed Classifier",
    page_icon="üê∂",
    layout="centered"
)

st.title("üêæ Dog Breed Classifier (Oxford-IIIT Pet)")

st.markdown(
    """
   This page allows you to upload a photo of a pet (dog/cat) and the 
   pre-trained model (MobileNetV2 + top layer) predicts the breed (37 classes).
    """
)

# 1) Cargar el modelo (se cachea para que no se recargue en cada interacci√≥n)
@st.cache_resource(show_spinner=False)
def cargar_modelo_pets(path="modelo_pets_mobilenetv2.h5"):
    return tf.keras.models.load_model(path)

model = cargar_modelo_pets()

# 2) Definir la lista de nombres de clase (37 razas)
#    Aseg√∫rate de copiar ac√° el mismo orden que ten√≠a ds_info.features["label"].names
class_names = [
    "Abyssinian", "American Bobtail", "Bengal", "Birman", "Bombay", "British Shorthair",
    "Egyptian Mau", "Maine Coon", "Persian", "Ragdoll", "Russian Blue", "Siamese",
    "Sphynx", "American Bulldog", "American Pit Bull Terrier", "Basset Hound",
    "Beagle", "Boxer", "Chihuahua", "English Cocker Spaniel", "English Setter",
    "German Shorthaired Pointer", "Great Pyrenees", "Havanese", "Japanese Chin",
    "Keeshond", "Leonberger", "Miniature Pinscher", "Newfoundland", "Pomeranian",
    "Pug", "Saint Bernard", "Samoyed", "Scotch Terrier", "Shiba Inu", "Siberian Husky",
    "Toy Poodle", "Yorkshire Terrier"
]

IMG_SIZE = 128
def preprocess_image_pets(img: Image.Image, target_size=(IMG_SIZE, IMG_SIZE)):
    """
    - Convertir a RGB
    - Redimensionar a (IMG_SIZE, IMG_SIZE)
    - Convertir a float32 y normalizar (√∑255.0)
    - Expandir dimensi√≥n de lote ‚Üí (1, IMG_SIZE, IMG_SIZE, 3)
    """
    img = img.convert("RGB")
    img = img.resize(target_size, resample=Image.BICUBIC)
    arr = np.array(img).astype("float32") / 255.0
    arr = np.expand_dims(arr, axis=0)  
    return arr

uploaded_file = st.file_uploader(
    "Uploud your pet's photo  (JPG or PNG).",
    type=["jpg", "jpeg", "png"]
)

if uploaded_file is not None:
    imagen = Image.open(uploaded_file)
    st.image(imagen, caption="Image uploaded", use_column_width=True)

    # 4.2) Preprocesar
    x = preprocess_image_pets(imagen, target_size=(IMG_SIZE, IMG_SIZE))

    # 4.3) Predecir
    with st.spinner("Analizing‚Ä¶"):
        preds = model.predict(x)           # devuelve un array shape (1, 37)
        prob = float(np.max(preds))        # probabilidad m√°s alta
        clase_idx = int(np.argmax(preds))  # √≠ndice de la clase (0..36)
        clase_nombre = class_names[clase_idx]


    st.markdown("---")
    st.write(f"**Result:** `{clase_nombre}`")
    st.write(f"**Probability:** `{prob:.3f}`")

    # 4.5) Mostrar gr√°fico de barras con todas las probabilidades
    st.subheader("Probabilities by class")
    probs_dict = {class_names[i]: float(preds[0][i]) for i in range(preds.shape[1])}
    st.bar_chart(probs_dict)

else:
    st.info("Please upload your pet's picture to get the prediction.")
