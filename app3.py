# -*- coding: utf-8 -*-
"""App3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/157oUE93PvwF7du6lM5lvzrWyjsDxbUE5
"""

# pages/4_Regression_Model.py

import streamlit as st
import numpy as np
import pandas as pd
import joblib

# 0) Page configuration
st.set_page_config(
    page_title="üìà iPhone Price Prediction",
    page_icon="üíµ",
    layout="centered"
)

st.title("üìà iPhone Price Prediction")

st.markdown(
    """
    In this page, you can input some macroeconomic numbers and tax information to predict
    an approximate price for an iPhone using a pre-trained regression model.
    The model was trained on an ‚ÄúiPhone Prices‚Äù dataset with:

    - **Features:** Tax, Total GDP, GDP per Capita, and Country
    - **Target:** iPhone Price (in USD)
    """
)

# 1) Load the saved regression pipeline
@st.cache_resource
def load_regression_model(path="modelo_regresion_iphone.pkl"):
    return joblib.load(path)

pipeline_reg = load_regression_model()

# 2) Extract list of countries that the model expects
#    (we read it from the fitted OneHotEncoder inside the pipeline)
ohe = pipeline_reg.named_steps['preprocessor'].named_transformers_['cat']
country_list = ohe.categories_[0].tolist()

# 3) User inputs
st.subheader("Input Data for Prediction")

col1, col2 = st.columns(2)

with col1:
    tax_input = st.number_input(
        label="Tax (in USD)",
        min_value=0.0,
        value=50.0,
        step=1.0,
        format="%.2f"
    )
    gdp_input = st.number_input(
        label="GDP (total, in USD)",
        min_value=0.0,
        value=2_000_000_000_000.0,  # default: 2 trillion
        step=1e9,
        format="%.0f"
    )

with col2:
    pc_gdp_input = st.number_input(
        label="GDP per Capita (in USD)",
        min_value=0.0,
        value=50_000.0,
        step=1000.0,
        format="%.2f"
    )
    country_input = st.selectbox(
        label="Country",
        options=country_list,
        index=0
    )

# 4) Perform prediction when user clicks button
if st.button("üîÆ Predict iPhone Price"):
    # Build a single-row DataFrame with the same column names the model expects
    X_new = pd.DataFrame([{
        'Tax': tax_input,
        'GDP_num': gdp_input,
        'PC_GDP_num': pc_gdp_input,
        'Country': country_input
    }])

    # Use the pipeline to predict
    predicted_price = pipeline_reg.predict(X_new)[0]

    st.markdown("---")
    st.subheader("Prediction Result")
    st.metric(label="üí∞ Estimated Price (USD)", value=f"{predicted_price:,.2f}")
    st.write(
        "According to the model, the iPhone price is approximately:",
        f"**${predicted_price:,.2f}**"
    )
else:
    st.write("Enter the values above and click **Predict iPhone Price** to see the estimate.")

# 5) Footer / Additional info
st.markdown("---")
